{"version":3,"sources":["components/Rune.js","components/Path.js","components/Loadout.js","App.js","serviceWorker.js","index.js"],"names":["Rune","name","value","currentPoints","totalPoints","updatePathIndex","active","className","classNames","disabled","onClick","e","preventDefault","onContextMenu","Path","runes","updatePathPoints","useState","pathIndex","setPathIndex","index","map","i","key","length","Loadout","setCurrentPoints","paths","reduce","acc","pathPoints","setPathPoints","useEffect","points","Object","keys","pPoints","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c8977783.chunk.js","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\n\nconst Rune = ({\n  name,\n  value,\n  currentPoints,\n  totalPoints,\n  updatePathIndex,\n  active = false,\n}) => {\n  /** handles the left click for a rune */\n  const handleClick = (e) => {\n    e.preventDefault();\n    updatePathIndex(value);\n  };\n\n  /** handles the right click for a rune */\n  const handleRightClick = (e) => {\n    e.preventDefault();\n    if (active) updatePathIndex(value - 1);\n  };\n\n  return (\n    <div\n      className={classNames({\n        \"rune-mastery__rune\": true,\n        active: active,\n        disabled: !active && currentPoints + value > totalPoints,\n      })}\n      onClick={handleClick}\n      onContextMenu={handleRightClick}\n    >\n      <div\n        className={classNames({\n          [`rune-mastery__rune__icon rune-mastery__rune__icon--${name}`]: true,\n          active: active,\n          disabled: !active && currentPoints + value > totalPoints,\n        })}\n      ></div>\n    </div>\n  );\n};\n\nexport default Rune;\n","import React, { Fragment, useState } from \"react\";\nimport classNames from \"classnames\";\nimport Rune from \"./Rune\";\n\nconst Path = ({\n  name,\n  runes,\n  totalPoints,\n  currentPoints,\n  updatePathPoints,\n}) => {\n  /** index for the largest rune selected */\n  const [pathIndex, setPathIndex] = useState(0);\n\n  /** updates the path index if the given index is within the range of allowed points */\n  const updatePathIndex = (index) => {\n    if (currentPoints + index <= totalPoints) {\n      setPathIndex(index);\n      updatePathPoints(name, index);\n    }\n  };\n\n  const renderDivider = (index) => (\n    <div\n      className={classNames({\n        \"rune-mastery__path__runes__divider\": true,\n        active: pathIndex >= index,\n      })}\n    />\n  );\n\n  return (\n    <div className=\"rune-mastery__path\">\n      <div className=\"rune-mastery__path__name\">{name}</div>\n      <div className=\"rune-mastery__path__runes\">\n        {runes.map(({ name }, i) => (\n          <Fragment key={i}>\n            {i > 0 && i < runes.length && renderDivider(i + 1)}\n            <Rune\n              key={i}\n              value={i + 1}\n              name={name}\n              currentPoints={currentPoints}\n              totalPoints={totalPoints}\n              updatePathIndex={updatePathIndex}\n              active={pathIndex >= i + 1}\n            />\n          </Fragment>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Path;\n","import React, { useState, useEffect } from \"react\";\nimport Path from \"./Path\";\nimport paths from \"../assets/paths.json\";\n\nconst Loadout = ({ totalPoints = 6 }) => {\n  /** the cumulative running total of points */\n  const [currentPoints, setCurrentPoints] = useState(0);\n\n  /** object representative for points per path initialized with zero for each path */\n  const [pathPoints, setPathPoints] = useState(\n    paths.reduce((acc, { name }) => {\n      acc[name] = 0;\n      return acc;\n    }, {})\n  );\n\n  /** update the current points each time the path points object changes */\n  useEffect(() => {\n    const points = Object.keys(pathPoints).reduce((acc, key) => {\n      return acc + pathPoints[key];\n    }, 0);\n\n    setCurrentPoints(points);\n  }, [pathPoints]);\n\n  /** updates the path points object with a new value for a given path */\n  const updatePathPoints = (name, points) => {\n    const pPoints = { ...pathPoints };\n    pPoints[name] = points;\n    setPathPoints(pPoints);\n  };\n\n  return (\n    <div className=\"rune-mastery__loadout\">\n      <div className=\"rune-mastery__loadout__title\">\n        TitanStar Legends - Rune Mastery Loadout Talent Calculator 9000\n      </div>\n\n      <div className=\"rune-mastery__loadout__content\">\n        <div className=\"rune-mastery__loadout__content__paths\">\n          {paths.map(({ name, runes = [] }, i) => (\n            <Path\n              key={i}\n              name={name}\n              runes={runes}\n              totalPoints={totalPoints}\n              currentPoints={currentPoints - pathPoints[name]}\n              updatePathPoints={updatePathPoints}\n            />\n          ))}\n        </div>\n\n        <div className=\"rune-mastery__loadout__content__points\">\n          <div className=\"rune-mastery__loadout__content__points__values\">\n            {currentPoints} / {totalPoints}\n          </div>\n          <div className=\"rune-mastery__loadout__content__points__title\">\n            Points Spent\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loadout;\n","import React from 'react';\nimport Loadout from \"./components/Loadout\";\nimport './styles/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"rune-mastery\">\n      <Loadout totalPoints={6} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}